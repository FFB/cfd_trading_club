package cfd_trading_club::Model::DB;

use strict;
use base 'Catalyst::Model::DBIC::Schema';
use DateTime;

__PACKAGE__->config(
    schema_class => 'cfd_trading_club::Schema',

    connect_info => {
        dsn => 'dbi:Pg:dbname=cfd_trading_club',
        user => '',
        password => '',
    }
);

my @index_tickers = (
    'SPX',
    'EURO50',
    'FTSE',
    'ASX200',
);

my @commod_tickers = (
    'GOLD',
    'SILVER',
    'OIL',
    'SUGAR',
);

my @forex_tickers = (
    'AUDUSD',
    'EURUSD',
    'GBPUSD',
    'AUDNZD',
);

# Retrieves the latest user predictions inside the current prediction time, if any
sub get_user_predictions {
    my ($self, $user_id) = @_;

    my $earliest_time = $self->get_prediction_start_time;

    my $dtf = $self->schema->storage->datetime_parser;
    my $rs = $self->resultset('LatestPrediction')->search(
        {},
        {
            bind => [$user_id, $dtf->format_datetime($self->get_prediction_start_time)],
        },
    );

    my %latest_preds;
    while (my $prediction = $rs->next) {
        $latest_preds{$prediction->get_column('ticker')} = $prediction->get_column('direction');
    }

    return \%latest_preds;
}

# Generates correctly formatted data for predictors based on
# variables provided at top of page
sub generate_predictors {
    my $self = shift;

    my %index_hash = (
        name       => 'Equity Index Futures',
        predictors => [],
    );
    for my $ticker (@index_tickers) {
        push @{ $index_hash{predictors} }, {ticker => $ticker};
    }

    my %commod_hash = (
        name       => 'Commodities',
        predictors => [],
    );
    for my $ticker (@commod_tickers) {
        push @{ $commod_hash{predictors} }, {ticker => $ticker};
    }

    my %forex_hash = (
        name       => 'FX',
        predictors => [],
    );
    for my $ticker (@forex_tickers) {
        push @{ $forex_hash{predictors} }, {ticker => $ticker};
    }

    my @categories = (\%index_hash, \%commod_hash, \%forex_hash);

    return \@categories;
}

# Returns the earliest datetime after which predictions
# could have been made for the next prediction period
sub get_prediction_start_time {
    my $self = shift;

    my $dt = DateTime->now;
    $dt->set_time_zone('Pacific/Auckland');

    # Earliest prediction time for the weekend or Monday morning is Sat 00:00
    # For all othertimes the earliest prediction time the closest previous noon or midnight
    if ($dt->day_of_week >= 6 or ($dt->day_of_week == 1 and $dt->hour < 12)) {
        $dt->subtract(days => 1) if $dt->day_of_week == 7;
        $dt->subtract(days => 2) if $dt->day_of_week == 1;
        $dt = $self->set_time_0000($dt);
    }
    else {
        if ($dt->hour < 12) {
            $dt = $self->set_time_0000($dt);
        }
        else {
            $dt = $self->set_time_1200($dt);
        }
    }

    return $dt;
}

sub set_time_0000 {
    my ($self, $dt) = @_;
    $dt->set(
        hour   => 0,
        minute => 0,
        second => 0,
    );
    return $dt;
}

sub set_time_1200 {
    my ($self, $dt) = @_;
    $dt->set(
        hour   => 12,
        minute => 0,
        second => 0,
    );
    return $dt;
}

=head1 NAME

cfd_trading_club::Model::DB - Catalyst DBIC Schema Model

=head1 SYNOPSIS

See L<cfd_trading_club>

=head1 DESCRIPTION

L<Catalyst::Model::DBIC::Schema> Model using schema L<cfd_trading_club::Schema>

=head1 GENERATED BY

Catalyst::Helper::Model::DBIC::Schema - 0.41

=head1 AUTHOR

Zane Moser

=head1 LICENSE

This library is free software, you can redistribute it and/or modify
it under the same terms as Perl itself.

=cut

1;
